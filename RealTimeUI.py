# Form implementation generated from reading ui file 'PokemonUI.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.
import time

from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtCore import QUrl, QThreadPool, QRunnable, QObject, pyqtSignal, pyqtSlot
from PyQt6.QtGui import QPixmap, QIcon
from PyQt6.QtNetwork import QNetworkAccessManager, QNetworkRequest
from locationsharinglib import Service
import multiprocessing
import os
import pickle

import GoogleNearby

if os.path.isfile("email.dat"):
    google_email = pickle.load(open("email.dat", "rb"))
else:
    google_email = None
if os.path.isfile("mail_password.dat"):
    mail_password = pickle.load(open("mail_password.dat", "rb"))
else:
    mail_password = None
if os.path.isfile("window_position.dat"):
    window_position = pickle.load(open("window_position.dat", "rb"))
else:
    window_position = None

cookies_file = 'cookies.txt'

service = Service(cookies_file=cookies_file, authenticating_account=google_email)

window = None
person_objects = []
nearby_process = None

for person in service.get_all_people():
    if person.full_name != google_email:
        person_objects.append(person)


def set_window_icon_from_response(http_response):
    global window
    pixmap = QPixmap()
    pixmap.loadFromData(http_response.readAll())
    icon = QIcon(pixmap)
    if window is not None:
        window.setWindowIcon(icon)


class WorkerSignal(QObject):
    finished = pyqtSignal()


class CheckProcess(QRunnable):
    signal = WorkerSignal()

    @pyqtSlot()
    def run(self):
        global nearby_process
        while nearby_process.is_alive():
            time.sleep(0.1)
        self.signal.finished.emit()


class Ui_RealTimeUI(object):

    def __init__(self, x, y):
        global app, window_position
        app = x
        window_position = y

    def setupUi(self, RealTimeUI):
        global window, app, window_position
        RealTimeUI.setObjectName("RealTimeUI")
        RealTimeUI.setFixedSize(800, 600)
        RealTimeUI.setStyleSheet("background-color: black;")
        RealTimeUI.setWindowTitle("RealTimeUI")
        if window_position is not None:
            RealTimeUI.move(window_position)
        window = RealTimeUI
        self.nam = QNetworkAccessManager()
        self.nam.finished.connect(set_window_icon_from_response)
        self.nam.get(QNetworkRequest(QUrl("https://raw.githubusercontent.com/"
                                          "T3tsuo/PokemonUI/main/cache/poke.ico")))
        self.centralwidget = QtWidgets.QWidget(parent=RealTimeUI)
        self.title = QtWidgets.QLabel(parent=self.centralwidget)
        self.title.setStyleSheet("color: #cccccc;")
        font = QtGui.QFont()
        font.setFamily("Tw Cen MT")
        font.setPointSize(26)
        self.title.setFont(font)
        self.title.setText("RealTimeUI")
        self.title.adjustSize()
        self.title.move(RealTimeUI.width() // 2 - self.title.width() // 2,
                        RealTimeUI.height() // 4 - self.title.height())
        self.person = QtWidgets.QComboBox(parent=self.centralwidget)
        self.person.setGeometry(QtCore.QRect(RealTimeUI.width() // 2 - 170 // 2,
                                             RealTimeUI.height() // 2 - 20, 170, 40))
        self.person.setStyleSheet("background-color: white;")
        for i in range(len(person_objects)):
            self.person.addItem(person_objects[i].full_name)
        self.start_button = QtWidgets.QPushButton(parent=self.centralwidget)
        self.start_button.setStyleSheet("color: black; background-color: grey;")
        font = QtGui.QFont()
        font.setFamily("Tw Cen MT")
        font.setPointSize(10)
        self.start_button.setFont(font)
        self.start_button.setGeometry(QtCore.QRect(RealTimeUI.width() // 2 - 70,
                                                   RealTimeUI.height() * 2 // 3 - 50 // 2, 140, 50))
        self.start_button.setText("Start")
        self.stop_button = QtWidgets.QPushButton(parent=self.centralwidget)
        self.stop_button.setStyleSheet("color: black; background-color: grey;")
        self.stop_button.setFont(font)
        self.stop_button.setGeometry(QtCore.QRect(RealTimeUI.width() // 2 - 70,
                                                  RealTimeUI.height() * 2 // 3 - 50 // 2, 140, 50))
        self.stop_button.setText("Stop")
        self.stop_button.hide()
        self.is_running = QtWidgets.QLabel(parent=self.centralwidget)
        self.is_running.setStyleSheet("color: #cccccc;")
        font = QtGui.QFont()
        font.setFamily("Tw Cen MT")
        font.setPointSize(14)
        self.is_running.setFont(font)
        self.is_running.hide()
        self.is_running.setText("Running...")
        self.is_running.adjustSize()
        self.is_running.move(self.start_button.x() + self.start_button.width() // 2 - self.is_running.width() // 2,
                             RealTimeUI.height() * 3 // 5 - self.is_running.height())
        RealTimeUI.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=RealTimeUI)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 26))
        self.menubar.setObjectName("menubar")
        RealTimeUI.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=RealTimeUI)
        self.statusbar.setObjectName("statusbar")
        RealTimeUI.setStatusBar(self.statusbar)
        QtCore.QMetaObject.connectSlotsByName(RealTimeUI)
        self.threadpool = QThreadPool()

        self.start_button.clicked.connect(self.run_nearby)
        self.start_button.setAutoDefault(True)

        self.stop_button.clicked.connect(stop_nearby)
        self.stop_button.setAutoDefault(True)

        app.aboutToQuit.connect(closeEvent)

    def run_nearby(self):
        global nearby_process, window
        nearby_process = multiprocessing.Process(target=run_script)
        nearby_process.daemon = True
        nearby_process.start()

        is_alive_worker = CheckProcess()
        is_alive_worker.signal.finished.connect(self.hide_status)
        self.threadpool.start(is_alive_worker)

        self.start_button.hide()
        self.stop_button.show()
        self.is_running.show()

    def hide_status(self):
        self.is_running.hide()
        self.stop_button.hide()
        self.start_button.show()


def stop_nearby():
    global nearby_process
    if nearby_process is not None and nearby_process.is_alive():
        nearby_process.terminate()


def closeEvent():
    global window
    pickle.dump(window.pos(), open("window_position.dat", "wb"))
    for p in multiprocessing.active_children():
        p.terminate()


def run_script():
    GoogleNearby.run()


if __name__ == "__main__":
    import sys
    multiprocessing.freeze_support()
    app = QtWidgets.QApplication(sys.argv)
    RealTimeUI = QtWidgets.QMainWindow()
    ui = Ui_RealTimeUI(app, window_position)
    ui.setupUi(RealTimeUI)
    RealTimeUI.show()
    sys.exit(app.exec())
